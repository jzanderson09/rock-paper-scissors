{"version":3,"sources":["images/rock.jpg","images/paper.jpg","images/scissors.jpg","components/Computer.jsx","components/Scoreboard.jsx","components/User.jsx","components/Game.jsx","calculations.js","App.js","testing/reportWebVitals.js","index.js"],"names":["Computer","props","loadingHandle","useState","loadingMsg","setLoadingMsg","play","matchOver","className","clearTimeout","src","choice","alt","setTimeout","id","Scoreboard","currentRound","maxRounds","computerScore","userScore","User","userChoice","onClick","userChoose","type","value","Game","state","choices","computerChoice","advanceRound","bind","computerChoose","determineMatchWinner","finishMatch","setStartValues","startNewMatch","startPlay","updateScores","this","setState","Math","floor","random","computer","user","winner","tiedScore","window","alert","componentDidMount","name","rock","paper","scissors","result","parseInt","prompt","isNaN","roundWinner","choiceIndex","confirm","timerHandle","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd31b29d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/rock.778a4ead.jpg\";","export default __webpack_public_path__ + \"static/media/paper.d6290310.jpg\";","export default __webpack_public_path__ + \"static/media/scissors.97b1d618.jpg\";","import React, { useState } from \"react\";\n\nconst Computer = props => {\n    const [loadingMsg, setLoadingMsg] = useState('');\n    let loadingHandle;\n    // Loading message with dots:\n    const loadingMessage = () => {\n        switch (loadingMsg) {\n            case 'Loading':\n                setLoadingMsg('Loading.');\n                break;\n            case 'Loading.':\n                setLoadingMsg('Loading..');\n                break;\n            case 'Loading..':\n                setLoadingMsg('Loading...');\n                break;\n            default:\n                setLoadingMsg('Loading');\n        }\n    };\n\n    if (!props.play && props.matchOver) {\n        return (\n            <div className=\"player\">\n                <h3 className=\"banner\">Computer!</h3>\n            </div>\n        );\n    }\n    else if (!props.play && !props.matchOver) {\n        loadingHandle = setTimeout(loadingMessage, 200);\n        return (\n            <div className=\"player\">\n                <h3 className=\"banner\">Computer!</h3>\n                <h4 id=\"loading\">{loadingMsg}</h4>\n            </div>\n        );\n    }\n    else {\n        clearTimeout(loadingHandle);\n        return (\n            <div className=\"player\">\n                <h3 className=\"banner\">Computer!</h3>\n                <img\n                    className=\"choice-img\"\n                    src={props.choice.src} \n                    alt=\"computer choice\" />\n            </div>\n        );\n    }\n};\n\nexport default Computer;","import React from 'react';\n\nconst Scoreboard = props => {\n    return (\n        <div className=\"scoreboard\">\n            <h3>Current Round: {props.currentRound}</h3>\n            <h3>Number of Rounds: {props.maxRounds}</h3>\n            <h3>Computer: {props.computerScore}</h3>\n            <h3>User: {props.userScore}</h3>\n        </div>\n    );\n};\n\nexport default Scoreboard;","import React from \"react\";\n\nconst User = props => {\n    if (!props.play && props.matchOver) {\n        return (\n            <div className=\"player\">\n                <h3 className=\"banner\">User!</h3>\n            </div>\n        );\n    }\n    else if (!props.play && !props.matchOver) {\n        return (\n            <div \n                className=\"player choices\">\n                <h3 className=\"banner\">User!</h3>\n                <input \n                    className=\"choice-btn\"\n                    onClick={() => props.userChoose(0)}\n                    type=\"submit\"\n                    value=\"Rock\" />\n                <input \n                    className=\"choice-btn\"\n                    onClick={() => props.userChoose(1)}\n                    type=\"submit\"\n                    value=\"Paper\" />\n                <input \n                    className=\"choice-btn\"\n                    onClick={() => props.userChoose(2)}\n                    type=\"submit\"\n                    value=\"Scissors\" />\n            </div>\n        );\n    }\n    else {\n        return (\n            <div className=\"player\">\n                <h3 className=\"banner\">User!</h3>\n                <img \n                    className=\"choice-img\"\n                    src={props.userChoice.src}\n                    alt=\"user choice\"\n                />\n            </div>\n        );\n    }\n\n};\n\nexport default User;","import React, { Component } from 'react';\nimport rock from '../images/rock.jpg';\nimport paper from '../images/paper.jpg';\nimport scissors from '../images/scissors.jpg';\nimport '../styling/Game.scss';\n\n//Components:\nimport Computer from './Computer';\nimport Scoreboard from './Scoreboard';\nimport User from './User';\n\nimport { evaluate } from '../calculations.js';\n\nclass Game extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            choices: [ ],\n            computerChoice: { },\n            userChoice: { }\n        };\n        this.advanceRound = this.advanceRound.bind(this);\n        this.computerChoose = this.computerChoose.bind(this);\n        this.determineMatchWinner = this.determineMatchWinner.bind(this);\n        this.finishMatch = this.finishMatch.bind(this);\n        this.setStartValues = this.setStartValues.bind(this);\n        this.startNewMatch = this.startNewMatch.bind(this);\n        this.startPlay = this.startPlay.bind(this);\n        this.updateScores = this.updateScores.bind(this);\n        this.userChoose = this.userChoose.bind(this);\n    }\n\n    componentDidMount() {\n        this.setStartValues();\n    }\n\n    // 5) If final round, determines/alerts match winner and resets values.  If not, round is incremented:\n    advanceRound() {\n        if (this.state.currentRound >= this.state.maxRounds) {\n            this.finishMatch();\n            this.setStartValues();\n        }\n        else {\n            this.setState({\n                computerChoice: {},\n                currentRound: this.state.currentRound + 1,\n                play: false,\n                userChoice: {}\n            });\n        }\n    }\n\n    // Returns random R/P/S choice:\n    computerChoose() {\n        const computerChoice = Math.floor(Math.random() * 3);\n        return this.state.choices[computerChoice];\n    }\n\n    // Determines and returns match winner upon final round:\n    determineMatchWinner() {\n        const computer = this.state.computerScore;\n        const user = this.state.userScore;\n        if (computer > user) {\n            return 'computer';\n        }\n        else if (computer < user) {\n            return 'user';\n        }\n        else {\n            return 'tie';\n        }\n    }\n\n    // 6) Determines match winner and alerts user:\n    finishMatch() {\n        const winner = this.determineMatchWinner();\n        if (winner === 'tie') {\n            const tiedScore = this.state.computerScore;\n            window.alert(`Both players tie the match with ${tiedScore} point(s)! Thank you for playing!`);\n        }\n        else {\n            if (winner === 'computer') {\n                window.alert(`The ${winner} won the match with ${this.state.computerScore} point(s)!  Thank you for playing!`);\n            }\n            else if (winner === 'user') {\n                window.alert(`You won the match with ${this.state.userScore} point(s)!  Thank you for playing!`);\n            }\n        }\n        this.componentDidMount();\n    }\n\n    // 1)/7) Sets values for start of new round:\n    setStartValues() {\n        this.setState({\n            choices: [\n                { name: 'rock', src: rock },\n                { name: 'paper', src: paper },\n                { name: 'scissors', src: scissors }\n            ],\n            computerChoice: { },\n            computerScore: 0,\n            currentRound: 0,\n            matchOver: true,\n            maxRounds: 1,\n            play: false,\n            userChoice: {},\n            userScore: 0\n        });\n    }\n\n    // 2) Picks random computer choice, initializes values and picks x amount of rounds (optional user specified):\n    startNewMatch() {\n        let maxRounds = 1;\n        let result;\n        do {\n            result = parseInt(window.prompt(`How many rounds would you like to play? --> Must be a number!`, 1));\n            if (result === null) {\n                result = 1;\n            }\n        } while ( (result === null) || isNaN(result));\n        maxRounds = result;\n        this.setState({\n            currentRound: 1,\n            matchOver: false,\n            maxRounds\n        });\n    }\n\n    // 3) Evalutes winner, alerts user, increments round:\n    startPlay() {\n        const computer = this.state.computerChoice.name;\n        const user = this.state.userChoice.name;\n        const winner = evaluate(computer, user);\n        this.updateScores(winner);\n        this.advanceRound();\n    }\n\n    // 4) Updates scores of roundWinner in state:\n    updateScores(roundWinner) {\n        if (roundWinner === 'tie') {\n            window.alert(`It's a tie! Both players picked ${this.state.computerChoice.name}!`);\n        }\n        else if (roundWinner === 'computer') {\n            window.alert(`The ${roundWinner} won the round!`);\n            this.setState({ \n                computerScore: this.state.computerScore + 1\n            });\n        }\n        else {\n            window.alert('You won the round!');\n            this.setState({ \n                userScore: this.state.userScore + 1\n            });\n        }\n    }\n\n    // 2) Assigns choice to user, starts gameplay:\n    userChoose(choiceIndex) {\n        const choice = this.state.choices[choiceIndex];\n        if (window.confirm(`Are you sure you want to pick ${choice.name}?`)) {\n            const computerChoice = this.computerChoose();\n            this.setState({ \n                userChoice: choice,\n                computerChoice,\n                play: true,\n                matchOver: false\n            });\n            this.timerHandle = setTimeout(() => this.startPlay(), 2000);\n        }\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.timerHandle);\n    }\n\n    render() {\n        if (!this.state.play && this.state.matchOver) {\n            return (\n                <div className='game'>\n                    <Scoreboard \n                        computerScore={this.state.computerScore}\n                        currentRound={this.state.currentRound}\n                        maxRounds={this.state.maxRounds}\n                        userScore={this.state.userScore} />\n                    <Computer \n                        play={this.state.play}\n                        matchOver={this.state.matchOver} />\n                    <User \n                        matchOver={this.state.matchOver}\n                        play={this.state.play}\n                        userChoice={this.state.userChoice} />\n                    <div className=\"button-div\">\n                        <button className=\"next-match\" \n                        onClick={() => this.startNewMatch()}>Play</button>\n                    </div>\n                </div>\n            );\n        }\n        else if (!this.state.play && !this.state.matchOver) {\n            return (\n                <div className='game'>\n                    <Scoreboard \n                        computerScore={this.state.computerScore}\n                        currentRound={this.state.currentRound}\n                        maxRounds={this.state.maxRounds}\n                        userScore={this.state.userScore} />\n                    <Computer \n                        play={this.state.play} \n                        matchOver={this.state.matchOver} />\n                    <User \n                        matchOver={this.state.matchOver}\n                        play={this.state.play}\n                        userChoice={this.state.userChoice}\n                        userChoose={this.userChoose} />\n                    <div className=\"button-div\">\n\n                    </div>\n                </div>\n            );         \n        }\n        else {\n            return (\n                <div className='game'>\n                    <Scoreboard \n                        computerScore={this.state.computerScore}\n                        currentRound={this.state.currentRound}\n                        maxRounds={this.state.maxRounds}\n                        userScore={this.state.userScore} />\n                    <Computer \n                        choice={this.state.computerChoice}\n                        matchOver={this.state.matchOver}\n                        play={this.state.play} />\n                    <User \n                        matchOver={this.state.matchOver}\n                        play={this.state.play}\n                        userChoice={this.state.userChoice} />\n                    <div className=\"button-div\">\n\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n\nexport default Game;","// Returns string to represent outcome/winning player:\nexport const evaluate = (computerChoice, userChoice) => {\n    if (computerChoice === userChoice) {\n        return 'tie';\n    }\n    else if (computerChoice === 'rock' && userChoice === 'paper') {\n        return 'user';\n    }\n    else if (computerChoice === 'rock' && userChoice === 'scissors') {\n        return 'computer';\n    }\n    else if (computerChoice === 'paper' && userChoice === 'rock') {\n        return 'computer';\n    }\n    else if (computerChoice === 'paper' && userChoice === 'scissors') {\n        return 'user';\n    }\n    else if (computerChoice === 'scissors' && userChoice === 'rock') {\n        return 'user';\n    }\n    else if (computerChoice === 'scissors' && userChoice === 'paper') {\n        return 'computer';\n    }\n};","import Game from './components/Game';\nimport './styling/App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 id=\"app-banner\">Rock ∞ Paper ∞ Scissors</h1>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styling/index.scss';\nimport App from './App';\nimport reportWebVitals from './testing/reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}